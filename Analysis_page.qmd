---
title: "Analysis page"
editor: visual
---

```{r}
final_df<-readRDS('all_census_dat.rdr')

#write.csv(merge_geometry, file = "census_dat.csv",row.names = FALSE)

library(tidycensus)
library(tidyverse)
library(sandwich)
library(lmtest)
library(car)
library(leaps)
library(segregation)
library(tigris)
library(sf)
library(olsrr)

#shows correlation between income and total cases for each district. Lower income => more cases 

#time to work plot 
correlation_coef <- final_df%>%
  group_by(district_name,year)%>%
  filter(district_name=='Brighton')%>%
  na.omit(aggregate_time_to_work)%>%
  select(incident_num)
  summarise(medincome_mean= mean(aggregate_time_to_work), total_cases = sum(!duplicated(incident_num))) %>%
  summarise(correlation_coef = round(cor(total_cases, medincome_mean),2))

print(correlation_coef, n=100)

final_df%>%
  group_by(district_name)

final_df%>%
  group_by(district_name,year)%>%
  na.omit(aggregate_time_to_work)%>%
  summarise(medincome_mean= mean(aggregate_time_to_work), total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(district_name, medincome_mean,fill = total_cases))+
  geom_bar(stat= 'identity')+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
  labs(y = 'Avg median income',title = 'Avg Median Income and Total Cases Over All Years')+
  annotate("text", x = Inf, y = Inf, label = paste("Correlation coefficient: ", correlation_coef), hjust = 1.5, vjust = 1)

final_df%>%
  group_by(district_name,year)%>%
  na.omit(aggregate_time_to_work)%>%
  summarise(medincome_mean= mean(aggregate_time_to_work), total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes( medincome_mean,total_cases))+
  geom_point()+
  geom_smooth(method ='lm')+
  labs(y = 'Avg median income',title = 'Avg Median Income and Total Cases Over All Years')+
  annotate("text", x = Inf, y = Inf, label = paste("Correlation coefficient: ", correlation_coef), hjust = 1.5, vjust = 1)

#income plot
correlation_coef <- final_df%>%
  group_by(district_name)%>%
  summarise(medincome_mean= mean(household_medincome), total_cases = sum(!duplicated(incident_num))) %>%
  summarise(correlation_coef = round(cor(total_cases, medincome_mean),2))

final_df%>%
  group_by(district_name)%>%
  summarise(medincome_mean= mean(household_medincome), total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(district_name, medincome_mean,fill = total_cases))+
  geom_bar(stat= 'identity')+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
  labs(y = 'Avg median income',title = 'Avg Median Income and Total Cases Over All Years')+
  annotate("text", x = Inf, y = Inf, label = paste("Correlation coefficient: ", correlation_coef), hjust = 1.5, vjust = 1)

#scatterplot with line of best fit 
final_df%>%
  group_by(district_name)%>%
  summarise(medincome_mean= mean(household_medincome), total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes( medincome_mean,total_cases))+
  geom_point()+
  geom_smooth(method ='lm')+
  labs(y = 'Avg median income',title = 'Avg Median Income and Total Cases Over All Years')+
  annotate("text", x = Inf, y = Inf, label = paste("Correlation coefficient: ", correlation_coef), hjust = 1.5, vjust = 1)

#Bachelors degree plot
correlation_coef <- final_df%>%
  group_by(district_name)%>%
  summarise(pct_not_enrolled= mean(bachelors_25/total_pop), total_cases = sum(!duplicated(incident_num)))%>%
  summarise(correlation_coef = round(cor(total_cases, pct_not_enrolled),2))

final_df%>%
  group_by(district_name)%>%
  summarise(pct_not_enrolled= mean(bachelors_25/total_pop), total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(district_name, pct_not_enrolled,fill = total_cases))+
  geom_bar(stat= 'identity')+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
  labs(y = 'Pct of population with high school diploma',title = 'Avg Populaion with HS Diploma and Total Cases Over All Years')+
  annotate("text", x = Inf, y = Inf, label = paste("Correlation coefficient: ", correlation_coef), hjust = 1.5, vjust = 1)

final_df%>%
  group_by(district_name)%>%
  summarise(pct_not_enrolled= mean(bachelors_25/total_pop), total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(pct_not_enrolled, total_cases))+
  geom_point()+
  geom_smooth(method ='lm')


#not in labor force plot
correlation_coef <- final_df%>%
  group_by(district_name)%>%
  summarise(unemployment_pct= mean(not_in_labor_force/total_pop), total_cases = sum(!duplicated(incident_num)))%>%
  summarise(correlation_coef = round(cor(total_cases, unemployment_pct),2))

final_df%>%
  group_by(district_name)%>%
  summarise(unemployment_pct= mean(not_in_labor_force/total_pop), total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(district_name, unemployment_pct,fill = total_cases))+
  geom_bar(stat= 'identity')+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
  labs(y = 'Pct of population employed',title = 'Avg Employment pct and Total Cases Over All Years')+
  annotate("text", x = Inf, y = Inf, label = paste("Correlation coefficient: ", correlation_coef), hjust = 1.5, vjust = 1)

final_df%>%
  group_by(district_name)%>%
  summarise(unemployment_pct= mean(not_in_labor_force/total_pop), total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(unemployment_pct, total_cases))+
  geom_point()+
  geom_smooth(method ='lm')

final_df%>%
  group_by(district_name)%>%
  summarise(unemployment_pct= mean(not_in_labor_force/total_pop), total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(unemployment_pct))+
  geom_histogram()

#total cases for districts plot
final_df%>%
  group_by(district_name)%>%
  summarise(total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(district_name,total_cases))+
  geom_bar(stat= 'identity')+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
  labs(title = 'Total Cases by District')

#single parent household plot
correlation_coef <- final_df%>%
  group_by(district_name)%>%
  summarise(single_household = mean(one_parent/ total_pop),total_cases = sum(!duplicated(incident_num))) %>%
  summarise(correlation_coef = round(cor(single_household, total_cases),2))

final_df%>%
  group_by(district_name)%>%
  summarise(single_household = mean(one_parent/ total_pop),total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(district_name,single_household, fill = total_cases))+
  geom_bar(stat= 'identity')+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
  labs(title = 'Pct of Households with Single Parent')+
  annotate("text", x = Inf, y = Inf, label = paste("Correlation coefficient: ", correlation_coef), hjust = 1.5, vjust = 1)

final_df%>%
  group_by(district_name)%>%
  summarise(single_household = mean(one_parent/ total_pop),total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(single_household, total_cases))+
  geom_point()+
  geom_smooth(method ='lm')


#married househomes
correlation_coef <- final_df%>%
  group_by(district_name)%>%
  summarise(married_house = mean(married_households/total_house_units),total_cases = sum(!duplicated(incident_num))) %>%
  summarise(correlation_coef = round(cor(married_house, total_cases),2))

final_df%>%
  group_by(district_name)%>%
  summarise(married_house_pct= mean(married_households/total_house_units), total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(district_name, married_house_pct,fill = total_cases))+
  geom_bar(stat='identity')+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
  labs(y = 'Avg pct below poverty level ',title = 'Avg pct below poverty level over All Years')+
  annotate("text", x = Inf, y = Inf, label = paste("Correlation coefficient: ", correlation_coef), hjust = 1.5, vjust = 1)

final_df%>%
  group_by(district_name)%>%
  summarise(married_house_pct= mean(married_households/total_house_units), total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(married_house_pct, total_cases))+
  geom_point()+
  geom_smooth(method ='lm')

#vacant househomes

correlation_coef <- final_df%>%
  group_by(district_name)%>%
  summarise(vaccant_house = mean(vacancy_status/total_house_units),total_cases = sum(!duplicated(incident_num))) %>%
  summarise(correlation_coef = round(cor(vaccant_house, total_cases),2))

final_df%>%
  group_by(district_name)%>%
  summarise(vaccant_house_pct= mean(vacancy_status/total_house_units), total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(district_name, vaccant_house_pct,fill = total_cases))+
  geom_bar(stat='identity')+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
  labs(y = 'Avg pct below poverty level ',title = 'Avg pct below poverty level over All Years')+
  annotate("text", x = Inf, y = Inf, label = paste("Correlation coefficient: ", correlation_coef), hjust = 1.5, vjust = 1)

final_df%>%
  group_by(district_name)%>%
  summarise(vaccant_house_pct= mean(vacancy_status/total_house_units), total_cases = sum(!duplicated(incident_num))) %>%
  ggplot(aes(vaccant_house_pct, total_cases))+
  geom_point()+
  geom_smooth(method ='lm')


lm_dat<-final_df%>%
  group_by(district_name, year)%>%
  summarise(aian_pct = mean(American_Indian_and_Alaska_Native_alone/total_pop),
            nhpt_pct = mean(Native_Hawaiian_and_Other_Pacific_Islander_alone/total_pop), 
            asian_pct = mean(Asian_alone/total_pop),
            pct_black = mean(Black_or_African_American_alone/total_pop),
            pct_white = mean(White_alone/total_pop),
            unemployment=mean(not_in_labor_force/total_pop),
            medincome_mean= mean(household_medincome),
            bachelors = mean(bachelors_25/total_pop),
            one_parent= mean(one_parent/total_house_units),
            married_house= mean(married_households/total_house_units),
            vacant_houses = mean(vacancy_status/total_house_units),
            travel_work = mean(aggregate_time_to_work),
            total_cases = sum(!duplicated(incident_num)))

#OLS with all variables 
ols<-lm(total_cases~travel_work+ pct_white+pct_black+asian_pct+nhpt_pct+aian_pct+district_name+ unemployment+ medincome_mean+bachelors+one_parent+ vacant_houses+married_house, data = lm_dat)
coeftest(ols, vcov. = vcovHC)
summary(ols) #92 adjusted Rsquared good for forecasting
vif(ols) # vif, look for correlated variables,anything above 5 high collinearity, below 1 no collinearity, above 1 medium collinearity 

ols_step_forward_p(ols) #forward and backwards variable selection 
ols_step_backward_p(ols)

#OLS socieoeconomic variables 
ols<-lm(total_cases~ travel_work+unemployment +medincome_mean+bachelors+one_parent+married_house, data = lm_dat)
coeftest(ols, vcov. = vcovHC)
summary(ols)
vif(ols)
ols_step_forward_p(ols)
ols_step_backward_p(ols)
plot(ols)

#OLS race and socieoeconomic variables
ols<-lm(total_cases~ asian_pct+pct_white+pct_black+nhpt_pct+aian_pct+travel_work+unemployment +medincome_mean+bachelors+one_parent+married_house, data = lm_dat)
coeftest(ols, vcov. = vcovHC)
summary(ols)
vif(ols)
ols_step_forward_p(ols)
ols_step_backward_p(ols)
plot(ols)

#OLS socieoeconomic and location
ols<-lm(total_cases~travel_work+district_name+ unemployment+ medincome_mean+bachelors+one_parent+vacant_houses+married_house, data = lm_dat)
coeftest(ols, vcov. = vcovHC)
summary(ols)
vif(ols)
ols_step_forward_p(ols)
ols_step_backward_p(ols)

#OLS race and location
ols<-lm(total_cases~ pct_white+pct_black+asian_pct+nhpt_pct+aian_pct+district_name, data = lm_dat)
coeftest(ols, vcov. = vcovHC)
summary(ols)
vif(ols)
ols_step_forward_p(ols)
ols_step_backward_p(ols)


#Spatial analysis 


#map
race_data<-c("White_alone", "Black_or_African_American_alone",
  "American_Indian_and_Alaska_Native_alone",
  "Asian_alone", "Native_Hawaiian_and_Other_Pacific_Islander_alone")


pivot_race<-final_df%>%
  group_by(year, GEOID_TRACT_20)%>%
  pivot_longer(race_data,names_to ='ethnicity',values_to = 'population_count')%>%
  ungroup()%>%
  group_by(ethnicity, GEOID_TRACT_20)%>%
  summarise(mean_population_count = mean(population_count))

print(pivot_race, n =100)

boston_local_seg <- pivot_race %>%
  mutual_local(
    group = "ethnicity",
    unit = "GEOID_TRACT_20",
    weight = "mean_population_count", 
    wide = TRUE
  )%>%
  rename(GEOID = GEOID_TRACT_20)

boston_local_seg$GEOID<-as.character(boston_local_seg$GEOID)


#save as rds, and read rds 

MA_tracts_seg <- tracts("MA", cb = TRUE, year = 2020) %>%
  inner_join(boston_local_seg, by = "GEOID") 

MA_tracts_seg%>%
  ggplot(aes(fill = ls)) + 
  geom_sf(color = NA) + 
  coord_sf(crs = st_crs(with_geometry))+
  scale_fill_viridis_c(option = "inferno") + 
  theme_void() + 
  labs(fill = "Local\nsegregation index")
  
#Geo weighted Regression 


library(GWmodel)

lm_dat<-final_df%>%
  group_by(district_name, year)%>%
  summarise(unemployment=mean(not_in_labor_force/total_pop),medincome_mean= mean(medincome),bachelors = mean(bacehelors_25/total_pop),
            one_parent= mean(one_parent/total_house_units),married_house= mean(married_households/total_house_units),vacant_houses = mean(vacancy_status/total_house_units),
            total_cases = sum(!duplicated(incident_num)))

formula2 <- "lm(total_cases~ unemployment +medincome_mean+bachelors+one_parent+married_house, data = roxbury_lm_dat)"

dfw_data_sp <- lm_dat %>%
  as_Spatial()

gw_model <- gwr.basic(
  formula = formula2, 
  data = lm_dat, 
  bw = bw,
  kernel = "bisquare",
  adaptive = TRUE
)

#time series forecast:
library(dynlm)
unloadNamespace('dyplr')

final_df%>%
  group_by(year)%>%
  summarise(total_cases = sum(!duplicated(incident_num)))%>%
  ggplot(aes(year, total_cases))+
  geom_line()

lm_dat<-final_df%>%
  group_by(year)%>%
  summarise(unemployment=mean(not_in_labor_force/total_pop),medincome_mean= mean(medincome),bachelors = mean(bacehelors_25/total_pop),
            one_parent= mean(one_parent/total_house_units),married_house= mean(married_households/total_house_units),vacant_houses = mean(vacancy_status/total_house_units),
            total_cases = sum(!duplicated(incident_num)))

unempl_zoo = as.zoo(lm_dat$unemployment)
total_zoo = as.zoo(lm_dat$total_cases)
parent_zoo = as.zoo(lm_dat$one_parent)

reg1 <- dynlm(log(total_zoo) ~ L(log(total_zoo),1:2)+L(log(unempl_zoo),1), data = lm_dat )

test1 <- coeftest(reg1, vcov = vcovHAC)
print(test1)

out1 = data.frame( t = 0:18, Impact = reg1$coef[2:4], UB = reg1$coef[2:4] + 1.96*test1[2:4,2], LB = reg1$coef[2:4] - 1.96*test1[2:4,2] )

FOJC_pctc = as.zoo(FOJC_pctc)
FDD = as.zoo(FDD) 

selected_columns$Date<-as.Date(selected_columns$Date)

count_dates<-selected_columns%>%
  mutate(month_year =format(Date, "%Y-%m"))%>%
  group_by(month_year)%>%
  summarize(unique_dates = rev(unique(month_year)))

print(count_dates,n=200)
```
